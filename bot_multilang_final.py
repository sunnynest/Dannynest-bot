import os, sys, asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN or ":" not in BOT_TOKEN:
    print("FATAL: BOT_TOKEN is missing or malformed", file=sys.stderr)
    raise SystemExit(1)

# URL –º–∏–Ω–∏‚Äë—Å–∞–π—Ç–∞ WebApp (—É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –¥–æ–º–µ–Ω Render + /app)
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://sunnynest-bot.onrender.com/app")

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —è–∑—ã–∫–æ–≤
LANGS = ["en", "ru", "uk", "be", "es"]

# –°–ª–æ–≤–∞—Ä—å —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–æ–≤
TEXT = {
    "start": {
        "en": "Welcome to Sunny Nest! Choose an option:",
        "ru": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Sunny Nest! –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        "uk": "–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ Sunny Nest! –û–±–µ—Ä—ñ—Ç—å —Ä–æ–∑–¥—ñ–ª:",
        "be": "–°–∞—Ä–¥—ç—á–Ω–∞ –∑–∞–ø—Ä–∞—à–∞–µ–º —É Sunny Nest! –ê–±—è—Ä—ã—Ü–µ —Ä–∞–∑–¥–∑–µ–ª:",
        "es": "¬°Bienvenido a Sunny Nest! Elige una opci√≥n:",
    },
    "menu": {
        "eggs": {
            "en": "ü•ö Order eggs",
            "ru": "ü•ö –ó–∞–∫–∞–∑–∞—Ç—å —è–π—Ü–∞",
            "uk": "ü•ö –ó–∞–º–æ–≤–∏—Ç–∏ —è–π—Ü—è",
            "be": "ü•ö –ó–∞–º–æ–≤—ñ—Ü—å —è–π–∫—ñ",
            "es": "ü•ö Pedir huevos",
        },
        "coops": {
            "en": "üè† Custom coops",
            "ru": "üè† –ö—É—Ä—è—Ç–Ω–∏–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑",
            "uk": "üè† –ö—É—Ä–Ω–∏–∫–∏ –Ω–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
            "be": "üè† –ö—É—Ä–Ω—ñ–∫—ñ –Ω–∞ –∑–∞–∫–∞–∑",
            "es": "üè† Gallineros a medida",
        },
        "info": {
            "en": "‚ÑπÔ∏è Info & Delivery",
            "ru": "‚ÑπÔ∏è –ò–Ω—Ñ–æ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞",
            "uk": "‚ÑπÔ∏è –Ü–Ω—Ñ–æ —Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∞",
            "be": "‚ÑπÔ∏è –Ü–Ω—Ña —ñ –¥–∞—Å—Ç–∞—û–∫–∞",
            "es": "‚ÑπÔ∏è Info y entrega",
        },
        "order_webapp": {
            "en": "üõí Order (WebApp)",
            "ru": "üõí –ó–∞–∫–∞–∑ (WebApp)",
            "uk": "üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è (WebApp)",
            "be": "üõí –ó–∞–º–æ–≤–∞ (WebApp)",
            "es": "üõí Pedido (WebApp)",
        },
    },
    "pricing": {
        "en": "Price: $5 per 12 eggs. Pickup or delivery (free from 5+ packs). Pay via Cash App: $SirotkinAlexander",
        "ru": "–¶–µ–Ω–∞: $5 –∑–∞ 12 —è–∏—Ü. –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 5 —É–ø–∞–∫–æ–≤–æ–∫). –û–ø–ª–∞—Ç–∞: Cash App $SirotkinAlexander",
        "uk": "–¶—ñ–Ω–∞: $5 –∑–∞ 12 —è—î—Ü—å. –°–∞–º–æ–≤–∏–≤—ñ–∑ –∞–±–æ –¥–æ—Å—Ç–∞–≤–∫–∞ (–±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ –≤—ñ–¥ 5 —É–ø–∞–∫–æ–≤–æ–∫). –û–ø–ª–∞—Ç–∞: Cash App $SirotkinAlexander",
        "be": "–ö–æ—à—Ç: $5 –∑–∞ 12 —è–π–∫–∞—û. –°–∞–º–∞–≤—ã–≤–∞–∑ –∞–±–æ –¥–∞—Å—Ç–∞—û–∫–∞ (–±—è—Å–ø–ª–∞—Ç–Ω–∞ –∞–¥ 5 —É–ø–∞–∫.). –ê–ø–ª–∞—Ç–∞: Cash App $SirotkinAlexander",
        "es": "Precio: $5 por 12 huevos. Retiro o entrega (gratis desde 5 paquetes). Pago: Cash App $SirotkinAlexander",
    },
    "coop_intro": {
        "en": "Describe your coop (size, material, windows, budget). We'll quote and build.",
        "ru": "–û–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∫—É—Ä—è—Ç–Ω–∏–∫ (—Ä–∞–∑–º–µ—Ä, –º–∞—Ç–µ—Ä–∏–∞–ª, –æ–∫–Ω–∞, –±—é–¥–∂–µ—Ç). –ü–æ—Å—á–∏—Ç–∞–µ–º –∏ –ø–æ—Å—Ç—Ä–æ–∏–º.",
        "uk": "–û–ø–∏—à—ñ—Ç—å –±–∞–∂–∞–Ω–∏–π –∫—É—Ä–Ω–∏–∫ (—Ä–æ–∑–º—ñ—Ä, –º–∞—Ç–µ—Ä—ñ–∞–ª, –≤—ñ–∫–Ω–∞, –±—é–¥–∂–µ—Ç). –ü–æ—Ä–∞—Ö—É—î–º–æ —ñ –ø–æ–±—É–¥—É—î–º–æ.",
        "be": "–ê–ø—ñ—à—ã—Ü–µ –∫—É—Ä–Ω—ñ–∫ (–ø–∞–º–µ—Ä, –º–∞—Ç—ç—Ä—ã—è–ª, –≤–æ–∫–Ω—ã, –±—é–¥–∂—ç—Ç). –ü–∞–ª—ñ—á—ã–º —ñ –ø–∞–±—É–¥—É–µ–º.",
        "es": "Describe tu gallinero (tama√±o, material, ventanas, presupuesto). Cotizamos y construimos.",
    },
}

def pick_lang(code: str | None) -> str:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —è–∑—ã–∫–æ–≤–æ–º—É –∫–æ–¥—É Telegram.
    –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π.
    """
    if not code:
        return "en"
    parts = code.split("-")
    if parts:
        lang = parts[0].lower()
        if lang in LANGS:
            return lang
    return "en"

def menu(lang: str) -> ReplyKeyboardMarkup:
    """
    –§–æ—Ä–º–∏—Ä—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏:
      - –ó–∞–∫–∞–∑ —á–µ—Ä–µ–∑ WebApp
      - –ó–∞–∫–∞–∑ —è–∏—Ü (—Ç–µ–∫—Å—Ç–æ–≤—ã–π)
      - –ó–∞–∫–∞–∑ –∫—É—Ä—è—Ç–Ω–∏–∫–æ–≤
      - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    """
    kb = [
        [
            KeyboardButton(
                text=TEXT["menu"]["order_webapp"][lang],
                web_app=WebAppInfo(url=WEBAPP_URL),
            )
        ],
        [
            KeyboardButton(text=TEXT["menu"]["eggs"][lang]),
            KeyboardButton(text=TEXT["menu"]["coops"][lang]),
        ],
        [KeyboardButton(text=TEXT["menu"]["info"][lang])],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

dp = Dispatcher()

@dp.message(CommandStart())
async def handle_start(m: types.Message):
    """
    /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ.
    """
    lang = pick_lang(m.from_user.language_code)
    await m.answer(TEXT["start"][lang], reply_markup=menu(lang))

@dp.message(F.web_app_data)
async def handle_web_app_data(m: types.Message):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp. –û–∂–∏–¥–∞–µ–º JSON —Å —Ç–∏–ø–æ–º –∑–∞–∫–∞–∑–∞ "eggs".
    """
    import json
    try:
        data = json.loads(m.web_app_data.data)
        if data.get("type") == "eggs":
            qty = data.get("qty")
            method = data.get("method")
            address = data.get("address") or "-"
            name = data.get("name") or "-"
            phone = data.get("phone") or "-"
            lang = pick_lang(m.from_user.language_code)
            text = (
                f"‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç!\n"
                f"‚Ä¢ –î—é–∂–∏–Ω: {qty}\n"
                f"‚Ä¢ –°–ø–æ—Å–æ–±: {method}\n"
                f"‚Ä¢ –ê–¥—Ä–µ—Å: {address}\n"
                f"‚Ä¢ –ò–º—è/—Ç–µ–ª: {name} / {phone}\n\n"
                f"{TEXT['pricing'][lang]}"
            )
            await m.answer(text)
        else:
            await m.answer("Received data.")
    except Exception as e:
        await m.answer(f"Bad data: {e}")

@dp.message(F.text)
async def handle_text(m: types.Message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö, –∫—É—Ä—è—Ç–Ω–∏–∫–∞—Ö –∏–ª–∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebApp.
    """
    lang = pick_lang(m.from_user.language_code)
    t = (m.text or "").strip()
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "–ö—É—Ä—è—Ç–Ω–∏–∫–∏"
    if t == TEXT["menu"]["coops"][lang]:
        await m.answer(TEXT["coop_intro"][lang])
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–¥–µ–ª–∞ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
    if t == TEXT["menu"]["info"][lang]:
        await m.answer(TEXT["pricing"][lang])
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ —è–∏—Ü: –ø—Ä–æ—Å–∏–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å WebApp
    if t == TEXT["menu"]["eggs"][lang]:
        await m.answer("–î–ª—è –∑–∞–∫–∞–∑–∞ —è–∏—Ü –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π ¬´üõí Order (WebApp)¬ª.")
        return

async def main():
    bot = Bot(BOT_TOKEN)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
import openai

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    raise SystemExit("OPENAI_API_KEY environment variable is not set")
openai.api_key = OPENAI_API_KEY



